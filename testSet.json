{
	"name" : "Example Set",
	"data" :
	[
		{
			"categories" :
			[
				"Bäume",
				"Baumtraversierung"
			],
			"questions"  :
			{
				"Welches ist keine Traversierungsart?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"suborder"   : 0,
					"fixedorder" : 0,
					"noneorder"  : 0
				}, 
				"wrong" : 
				{ 
					"preorder" : 0,
					"postorder" : 0,
					"inorder" : 0
				}
			}
		},

		{
			"categories" :
			[
				"TechGI",
				"Abkürzungen"
			],
			"questions"  :
			{
				"Wofür steht FPGA?" : 0,
				"FPGA steht für"    : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Field Programmable Gate Array" : 0
				}, 
				"wrong" : 
				{ 
					"Final Port Gate Array" : 0,
					"Fixed Portable Great Awesome" : 0,
					"Frequently Programmed Game Application" :0,
					"Fast Programmable Gate Array" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"Welche dieser Listenfunktionale wendet eine übergebene Funktion auf jedes Element der Liste an?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"map" : 0
				}, 
				"wrong" : 
				{ 
					"reduce" : 0,
					"filter" : 0,
					"Es gibt kein Listenfunktional, das so etwas kann" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Monaden"
			],
			"questions"  :
			{
				"Mit welchem Operator können z.B IO-Befehle verkettet werden?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"&" : 0
				},
				"wrong" : 
				{ 
					"++" : 0,
					"::" : 0,
					"&&" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"Wofür ist reduce zuständig" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Listenelemente zusammenfassen" : 0
				}, 
				"wrong" : 
				{ 
					"Datentyp der Listenelemente ändern" : 0,
					"Liste komprimmieren" : 0,
					"Programmcode verkürzen" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"TYPE book == book(author : person,<br/>title : denotation ,<br/>year : nat<br/>Welcher Datentyp liegt hier vor?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Produkttyp" : 0
				}, 
				"wrong" : 
				{ 
					"Summentyp" : 0,
					"Aufzählungstyp" : 0,
					"Rekursiver Datentyp" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"TYPE book == book(author : person,<br/>title : denotation ,<br/>year : nat<br/>Welcher der Folgenden Teile gehört nicht zur induzierten Signatur" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"FUN book person ** denotation -> book" : 0
				}, 
				"wrong" : 
				{ 
					"SORT book" : 0,
					"FUN book: person ** denotation ** nat -> book" : 0,
					"FUN book?: book -> bool" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Um was für eine Traversierungsart handelt es sich bei preOrder" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"root - left - right" : 0
				}, 
				"wrong" : 
				{ 
					"left - right - root" : 0,
					"left - root - right" : 0,
					"right root left" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Um was für eine Traversierungsart handelt es sich bei inOrder" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"left - root - right" : 0
				}, 
				"wrong" : 
				{ 
					"left - right - root" : 0,
					"root - left - right" : 0,
					"right root left" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Um was für eine Traversierungsart handelt es sich bei postOrder" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"left - right - root" : 0
				}, 
				"wrong" : 
				{ 
					"left - root - right" : 0,
					"root - left - right" : 0,
					"right root left" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was für einen Vorteil hat eine inOrder Traversierung auf einem sortierte Binärbaum?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Die generierte Liste ist Sortiert" : 0
				}, 
				"wrong" : 
				{ 
					"Schnelle Laufzeit" : 0,
					"Die generierte Liste ist minimal groß" : 0,
					"Alle Wurzeln stehen hintereinander" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was geschieht, wenn man bei einem Baum mit mehr als einem Knoten eine Kante entfernt?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Es entsteht ein Wald" : 0
				}, 
				"wrong" : 
				{ 
					"nichts geschieht" : 0,
					"Der Wert des zugehörigen Blattes geht für immer verloren" : 0,
					"Kanten können nicht entfernt werden" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"Welches der Folgenden ist kein Listenfunktional" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"split" : 0
				}, 
				"wrong" : 
				{ 
					"map" : 0,
					"filter" : 0,
					"reduce" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"Was macht filter?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Selektiert alle Elemente, die ein bestimmtes Prädikat erfüllen und entfernt sie aus der Liste" : 0
				}, 
				"wrong" : 
				{ 
					"Löscht doppelte Elemente" : 0,
					"filtert alle Elemente, die kleiner als ein eingegebenes sind aus der Liste" : 0,
					"sortiert die Liste" : 0
				}
			}
		},

		{
			"categories" :
			[
				"MPGI1"
			],
			"questions"  :
			{
				"Wie heißt der Erfinder der Programmiersprache OPAL?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Dr.Pepper" : 0
				}, 
				"wrong" : 
				{ 
					"Professor Pepsi" : 0,
					"Vitali Cola" : 0,
					"Prof. Dr. Opalos"  : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was ist ein Binärbaum?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Baum mit höchstens 2 Nachfolgern" : 0
				}, 
				"wrong" : 
				{ 
					"Baum mit mindestens 2 Nachfolgern" : 0,
					"Baum mit binärem Knoteninhalt" : 0,
					"Baum mit 2 Knoten" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Aufwandsberechnung"
			],
			"questions"  :
			{
				"Was ist größer O(n²) oder O(n log(n))?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"O(n²)" : 0
				}, 
				"wrong" : 
				{ 
					"(n log(n))" : 0,
					"gleich groß" : 0,
					"keine Ahnung" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Aufwandsberechnung"
			],
			"questions"  :
			{
				"FUN g: nat -> nat<br/>DEF g(n) == f(n-1) +5<br/> Welcher der Folgenden ist der passende Aufwandsterm?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"A(f(n-1)) + A(+)" : 0
				}, 
				"wrong" : 
				{ 
					"A(fg(n+1)) + A(*)" : 0,
					"A(f(n)) + A(+)" : 0,
					"A(f(n-1)) + A(g(n))" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Aufwandsberechnung"
			],
			"questions"  :
			{
				"Wie viele Rekurrenzrelationen gibt es?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"5" : 0
				}, 
				"wrong" : 
				{ 
					"7" : 0,
					"3" : 0,
					"4" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"Was ist eine verschränkte Rekursion?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"2 Funktionen die sich gegenseitig aufrufen" : 0
				}, 
				"wrong" : 
				{ 
					"Eine Funktion die nur sich selbst aufruft" : 0,
					"Eine schnell wachsende Tail-Recursion" : 0,
					"Eine Baumartige Rekursion mit Aufwand O(n)" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"Was passiert bei einer baumartigen Rekursion?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Rekursionsaufrufe wachsen zu Baumartiger struktur an" : 0
				}, 
				"wrong" : 
				{ 
					"Der Rekursionsanker wird nie erreicht" : 0,
					"Die Parameter werden nicht inkrementiert" : 0,
					"Es entsteht ein Rot-Schwarz Baum" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Konstrukte"
			],
			"questions"  :
			{
				"IF x < 5 THEN 1<br/>IF x > 5 THEN 2<br/>IF x = 5 THEN 3<br/>Wie heißt diese Struktur?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Dijkstra-IF" : 0
				}, 
				"wrong" : 
				{ 
					"Synthetic-If" : 0,
					"Pepper-IF" : 0,
					"Elseless-IF" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"f(x) = f(x-1)<br/>Um welche Rekursionsart handelt es sich?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Repetitive Rekursion/Tail-Recursion" : 0
				}, 
				"wrong" : 
				{ 
					"Lineare Rekursion" : 0,
					"Geschachtelte Rekursion" : 0,
					"Verschränkte Rekursion" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"f(x) = 1 + f(x-1)<br/>Um welche Rekursionsart handelt es sich?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Lineare Rekursion" : 0
				}, 
				"wrong" : 
				{ 
					"Repetitive Rekursion/Tail-Recursion" : 0,
					"Geschachtelte Rekursion" : 0,
					"Verschränkte Rekursion" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"f(x) = f(x-1) + f(x-2)<br/>Um welche Rekursionsart handelt es sich?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Baumartige Rekursion" : 0
				}, 
				"wrong" : 
				{ 
					"Repetitive Rekursion/Tail-Recursion" : 0,
					"Geschachtelte Rekursion" : 0,
					"Verschränkte Rekursion" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"f(x) = f(f(x*2))<br/>Um welche Rekursionsart handelt es sich?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Geschachtelte Rekursion" : 0
				}, 
				"wrong" : 
				{ 
					"Repetitive Rekursion/Tail-Recursion" : 0,
					"Lineare Rekursion" : 0,
					"Verschränkte Rekursion" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Rekursion"
			],
			"questions"  :
			{
				"f(x) = g(x-1)<br/>g(x) = f(x-1)<br/>Um welche Rekursionsart handelt es sich?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Verschränkte Rekursion" : 0
				}, 
				"wrong" : 
				{ 
					"Repetitive Rekursion/Tail-Recursion" : 0,
					"Lineare Rekursion" : 0,
					"Baumartige Rekursion" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"Welche der folgenden Signaturen passt zu einem Diskriminator" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"FUN cat?: animal -> bool" : 0
				}, 
				"wrong" : 
				{ 
					"FUN name: animal -> string" : 0,
					"FUN cat: string ** nat -> cat" : 0,
					"FUN catConv: cat -> dog" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"TYPE animal = cat(name: string, age: nat)<br/>Welche der folgenden induzierten Signaturen passt zu einem Selektor für den Namen einer Katze?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"FUN name: animal -> string" : 0
				}, 
				"wrong" : 
				{ 
					"FUN cat?: cat -> bool" : 0,
					"FUN cat: string ** nat -> cat" : 0,
					"FUN catConv: cat -> dog" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"Welche der folgenden Signaturen passt zu einem Konstruktor" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"FUN cat: string ** nat -> cat" : 0
				}, 
				"wrong" : 
				{ 
					"FUN cat?: animal -> bool" : 0,
					"FUN name: animal -> string" : 0,
					"FUN catConv: cat -> dog" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"TYPE animal = cat(name: string,age:nat)<br/>\tdog(name: string)<br/>Welcher Datentyp liegt hier vor" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Summentyp" : 0
				}, 
				"wrong" : 
				{ 
					"Produkttyp" : 0,
					"Aufzählungstyp" : 0,
					"Rekursiver Datentyp" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"DATA animal = cat dog karakal elefant<br/>Welcher Datentyp liegt hier vor" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Aufzählungstyp" : 0
				}, 
				"wrong" : 
				{ 
					"Produkttyp" : 0,
					"Summentyp" : 0,
					"Rekursiver Datentyp" :0
				}
			}
		},

		{
			"categories" :
			[
				"Datentypen"
			],
			"questions"  :
			{
				"TYPE tree = node(key:alpha, left: tree, right: tree<br/>\tnil<br/>Welcher Datentyp liegt hier vor" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Rekursiver Datentyp" : 0
				}, 
				"wrong" : 
				{ 
					"Produkttyp" : 0,
					"Summentyp" : 0,
					"Aufzählungstyp" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"FUN xxx: (in -> bool) ->  seq{in} -> seq{in}<br/> Die Signatur welches Listenfunktionals liegt hier vor?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"filter" : 0
				}, 
				"wrong" : 
				{ 
					"map" : 0,
					"reduce" : 0,
					"zip" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"FUN xxx: (a ** b -> c) ** b  ->  seq{a} ** seq{b} -> seq{c}<br/> Die Signatur welches Listenfunktionals liegt hier vor?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"zip" : 0
				}, 
				"wrong" : 
				{ 
					"map" : 0,
					"reduce" : 0,
					"filter" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"FUN xxx: (a ** b -> b) ** b -> seq{a} -> b<br/> Die Signatur welches Listenfunktionals liegt hier vor?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"reduce" : 0
				}, 
				"wrong" : 
				{ 
					"map" : 0,
					"filter" : 0,
					"zip" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Listenfunktionale"
			],
			"questions"  :
			{
				"FUN xxx: (a -> b) ->  seq{a} -> seq{b}<br/> Die Signatur welches Listenfunktionals liegt hier vor?" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"map" : 0
				}, 
				"wrong" : 
				{ 
					"filter" : 0,
					"reduce" : 0,
					"zip" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was bezeichnet man mit der Größe eines Baumes" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Anzahl der Knoten" : 0
				}, 
				"wrong" : 
				{ 
					"Länge des längsten Pfades" : 0,
					"Anzahl der Kanten" : 0,
					"Größter Wert" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was bezeichnet man mit der Höhe eines Baumes" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Länge des längsten Pfades" : 0
				}, 
				"wrong" : 
				{ 
					"Anzahl der Knoten" : 0,
					"Anzahl der Kanten" : 0,
					"Größter Wert" : 0
				}
			}
		},

		{
			"categories" :
			[
				"Bäume"
			],
			"questions"  :
			{
				"Was bezeichnet man mit der Pfadlänge eines Baumes" : 0
			},
			"rating" : 0,
			"answers" :
			{
				"right" :
				{
					"Anzahl der Kanten" : 0
				}, 
				"wrong" : 
				{ 
					"Länge des längsten Pfades" : 0,
					"Anzahl der Knoten" : 0,
					"Größter Wert" : 0
				}
			}
		}
	]
}